{"title": "accelerate.mdx", "repo_owner": "huggingface", "repo_name": "transformers", "text": "In our series of letters from African journalists, film-maker and columnist Farai Sevenzo looks at the challenges facing some of the biggest names in the world of Transformers. ```bash pip install accelerate ``` If you're looking for a way to train your model on a device, you can now apply to the machine and start building your own model. ```py >>> from accelerate import Accelerator >>> accelerator = Accelerator() ``` If you want to make the most of the training projects you need to accelerate, the compiler is your guide to the new super-heavy machine. ```py >>> train_dataloader, eval_dataloader, model, optimizer = accelerator.prepare( ... train_dataloader, eval_dataloader, model, optimizer ... ) ``` If you want to improve your training methods, you need to add a new way to the existing one-by-one-hiding method. ```py >>> for epoch in range(num_epochs): ... for batch in train_dataloader: ... outputs = model(**batch) ... loss = outputs.loss ... accelerator.backward(loss) ... optimizer.step() ... lr_scheduler.step() ... optimizer.zero_grad() ... progress_bar.update(1) ``` If you want to make it easier for you to train for your own training loop, you need to add a new way to your training loop. ```diff + from accelerate import Accelerator from transformers import AdamW, AutoModelForSequenceClassification, get_scheduler + accelerator = Accelerator() model = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2) optimizer = AdamW(model.parameters(), lr=3e-5) - device = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\") - model.to(device) + train_dataloader, eval_dataloader, model, optimizer = accelerator.prepare( + train_dataloader, eval_dataloader, model, optimizer + ) num_epochs = 3 num_training_steps = num_epochs * len(train_dataloader) lr_scheduler = get_scheduler( \"linear\", optimizer=optimizer, num_warmup_steps=0, num_training_steps=num_training_steps ) progress_bar = tqdm(range(num_training_steps)) model.train() for epoch in range(num_epochs): for batch in train_dataloader: - batch = {k: v.to(device) for k, v in batch.items()} outputs = model(**batch) loss = outputs.loss - loss.backward() + accelerator.backward(loss) optimizer.step() lr_scheduler.step() optimizer.zero_grad() progress_bar.update(1) ``` If you're looking for a way to train your train, you can add a series of lines of code to the training kit or a notebook. ```bash accelerate config ``` A look at some of the key stories of the week in the training session, which will be broadcast on BBC One, on social media. ```bash accelerate launch train.py ``` If you're looking for a way to train for Colaboratory's TPUs, you might want to add a new tool to your notebook. ```py >>> from accelerate import notebook_launcher >>> notebook_launcher(training_function) ``` In our series of letters from African journalists, film-maker and columnist Farai Sevenzo looks at some of the key stories from the world of technology."}
